@page "/"
@using IbkrTradeRepository.PortalApp.Domain
@using IbkrTradeRepository.PortalApp.Infrastructure.Persistance.Repositories

@inject ITradeRepository TradeRepository
@inject ICashTransactionRepository CashTransactionRepository
@inject IAccountRepository AccountRepository

<PageTitle>Overview</PageTitle>

<h1>All Trades and Cash Transactions</h1>

@if (trades == null || cashTransactions == null)
{
    <p><em>Loading...</em></p>
}
else
{
    // I want to use mudblazod DataGrid in order to hold all the data
    <MudDataGrid Items="@trades" Filterable="false" SortMode="@SortMode.Single" Groupable="false" title="Trades">
        <Columns>
            <PropertyColumn Property="x => x.Symbol" />
            <PropertyColumn Property="x => x.TradeDate" />
            <PropertyColumn Property="x => x.TradeDirection" Title="Trade Direction" />
            <PropertyColumn Property="x => x.Proceeds" Format="C" />
            <PropertyColumn Property="x => x.TradeType"/>
        </Columns>
    </MudDataGrid>

    <MudDataGrid Items="@cashTransactions" Filterable="false" SortMode="@SortMode.Single" Groupable="false" title="Cash Transactions">
        <Columns>
            <PropertyColumn Property="x => x.TransactionDate" />
            <PropertyColumn Property="x => x.Description" Title="Trade Direction" />
            <PropertyColumn Property="x => x.Amount" />
            <PropertyColumn Property="x => x.Currency" />            
            <PropertyColumn Property="x => x.TransactionType" />
        </Columns>
    </MudDataGrid>
}

@code {
    private List<IbkrTradeRepository.PortalApp.Domain.Trade> trades = new List<Trade>();
    private List<IbkrTradeRepository.PortalApp.Domain.CashTransaction> cashTransactions = new List<CashTransaction>();
    private List<Guid> accountIds;

    protected override async Task OnInitializedAsync()
    {
        accountIds = (await AccountRepository.GetAllAccountsAsync()).Select(acc => acc.Id).ToList();

        foreach (var accId in accountIds)
        {
            var tradesLoaded = (await TradeRepository.GetTradesByAccountIdAsync(accId)).OrderBy(t => t.TradeDate);
            var cashTransactionLoaded = (await CashTransactionRepository.GetCashTransactionsByAccountIdAsync(accId)).OrderBy(cash => cash.TransactionDate);
            trades.AddRange(tradesLoaded);
            cashTransactions.AddRange(cashTransactionLoaded);
        }        
    }
}
