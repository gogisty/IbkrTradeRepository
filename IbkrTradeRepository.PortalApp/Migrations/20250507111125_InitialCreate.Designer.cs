// <auto-generated />
using System;
using IbkrTradeRepository.PortalApp.Infrastructure.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace IbkrTradeRepository.PortalApp.Migrations
{
    [DbContext(typeof(PortfolioDbContext))]
    [Migration("20250507111125_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("IbkrTradeRepository.PortalApp.Domain.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("BaseCurrency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasDefaultValue("EUR");

                    b.Property<string>("BrokerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Accounts", (string)null);
                });

            modelBuilder.Entity("IbkrTradeRepository.PortalApp.Domain.CashTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasDefaultValue("EUR");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateOnly>("TransactionDate")
                        .HasColumnType("date");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("CashTransactions", (string)null);
                });

            modelBuilder.Entity("IbkrTradeRepository.PortalApp.Domain.IbkrCode", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Code");

                    b.ToTable("IbkrCodes");
                });

            modelBuilder.Entity("IbkrTradeRepository.PortalApp.Domain.OptionTradeDetails", b =>
                {
                    b.Property<Guid>("TradeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Multiplier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(100);

                    b.Property<string>("OptionType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("StrikePrice")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("UnderlyingSymbol")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("TradeId");

                    b.ToTable("OptionTradeDetails", (string)null);
                });

            modelBuilder.Entity("IbkrTradeRepository.PortalApp.Domain.Trade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Commission")
                        .HasColumnType("numeric");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<decimal>("Proceeds")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("TradeDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TradeDirection")
                        .HasColumnType("integer");

                    b.Property<decimal>("TradePrice")
                        .HasColumnType("numeric");

                    b.Property<string>("TradeType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("Code");

                    b.ToTable("Trades", (string)null);
                });

            modelBuilder.Entity("IbkrTradeRepository.PortalApp.Domain.CashTransaction", b =>
                {
                    b.HasOne("IbkrTradeRepository.PortalApp.Domain.Account", "Account")
                        .WithMany("CashTransactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("IbkrTradeRepository.PortalApp.Domain.OptionTradeDetails", b =>
                {
                    b.HasOne("IbkrTradeRepository.PortalApp.Domain.Trade", "Trade")
                        .WithOne("OptionDetails")
                        .HasForeignKey("IbkrTradeRepository.PortalApp.Domain.OptionTradeDetails", "TradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trade");
                });

            modelBuilder.Entity("IbkrTradeRepository.PortalApp.Domain.Trade", b =>
                {
                    b.HasOne("IbkrTradeRepository.PortalApp.Domain.Account", "Account")
                        .WithMany("Trades")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IbkrTradeRepository.PortalApp.Domain.IbkrCode", "IbkrCode")
                        .WithMany()
                        .HasForeignKey("Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("IbkrCode");
                });

            modelBuilder.Entity("IbkrTradeRepository.PortalApp.Domain.Account", b =>
                {
                    b.Navigation("CashTransactions");

                    b.Navigation("Trades");
                });

            modelBuilder.Entity("IbkrTradeRepository.PortalApp.Domain.Trade", b =>
                {
                    b.Navigation("OptionDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
